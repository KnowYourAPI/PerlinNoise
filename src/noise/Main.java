package noise;

import java.awt.image.BufferedImage;
import java.util.Random;

public class Main {

	// x is a number in the range min..max
	// converts x to a number in the range [a,b]
	public static double scaleRange(double min, double max, double a, double b, double x) {
	    return ((b - a) * (x - min) / (max - min)) + a;
	}

	// converts x from a number in the range [-1, 1] to a number in the range [0, 255]
	public static int scale256(double x) {
	    return (int)Math.round(scaleRange(-1, 1, 0, 255, x));
	}
	
	public static void main(String[] args) {
		Random random = new Random();
		// Create a seeded noise generator
		Noise n = new Noise(random.nextInt());
		
		// Prepare an array to fill with ARGB values
		// The image's size will be 800 by 600 pixels
		int[][] rgbValues = new int[800][600];
		
		// Fill the array with data generated by the smoothnoise function
		for(int y = 0; y < rgbValues.length; y++) {
			for(int x = 0; x < rgbValues[0].length; x++) {
				// Generate a noise value
				// change the function to create a different kind of noise
				// white noise and smooth noise seem to work fine
				// interpolated noise produces a weird outcome...
				float noiseValue = n.smoothNoise(x, y);
				int scaledValue = scale256(noiseValue / 4);
				int colorValue = ((255 << 24) | scaledValue << 16 | scaledValue << 8 | scaledValue);
				rgbValues[y][x] = colorValue;
			}
		}
		
		// Convert the array to a PNG-Image
		BufferedImage bufferedImage = ImageExporter.convertRGBArray(rgbValues);
		// Save that PNG-Image to the disk
		ImageExporter.saveAsFile("smoothnoise.png", bufferedImage);
	}

}