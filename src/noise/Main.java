package noise;

import java.awt.image.BufferedImage;
import java.util.Random;

public class Main {

	// x is a number in the range min..max
	// converts x to a number in the range [a,b]
	public static float scaleRange(float min, float max, float a, float b, float x) {
	    return ((b - a) * (x - min) / (max - min)) + a;
	}

	// converts x from a number in the range [-1, 1] to a number in the range [0, 255]
	public static int scale256(float x) {
	    return Math.round(scaleRange(-1, 1, 0, 255, x));
	}
	
	public static void generatePerlinImage() {
		Random random = new Random();
		// Create a seeded noise generator
		Noise n = new Noise(random.nextInt());
		
		// Prepare an array to fill with ARGB values
		// The image's size will be 800 by 600 pixels
		int[][] rgbValues = new int[800][600];
		
		// Fill the array with data generated by the noise functions
		for(int y = 0; y < rgbValues.length; y++) {
			for(int x = 0; x < rgbValues[0].length; x++) {
				float noiseValue = 0;
				noiseValue += n.interpolatedNoise(x * 0.001f, y * 0.001f);
				noiseValue += n.interpolatedNoise(x * 0.002f, y * 0.002f);
				noiseValue += n.interpolatedNoise(x * 0.004f, y * 0.004f);
				noiseValue += n.interpolatedNoise(x * 0.008f, y * 0.008f);
				noiseValue /= 4; 
				int scaledValue = scale256(noiseValue);
				int colorValue = ((255 << 24) | scaledValue << 16 | scaledValue << 8 | scaledValue);
				rgbValues[y][x] = colorValue;
			}
		}
		
		// Convert the array to a PNG-Image
		BufferedImage bufferedImage = ImageExporter.convertRGBArray(rgbValues);
		// Save that PNG-Image to the disk
		ImageExporter.saveAsFile("perlin.png", bufferedImage);
	}
	
	public static void main(String[] args) {

		generatePerlinImage();

	}

}